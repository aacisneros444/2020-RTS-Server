using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;

/// <summary>
/// This class holds multiHashmaps that store entity data based on keys generated by world coordinates (chunks).
/// In doing this, efficient entity lookups are made possible --
/// (units that need targets don't search the entire map, but only nearby quadrants for example).
/// </summary>
public class QuadrantMultiHashmaps : MonoBehaviour
{
    private const int quadrantZMultiplier = 1000;
    private const int quadrantCellSize = 200;
    public static NativeMultiHashMap<int, BucketedResourceNodeData> resourceNodeQuadrantMultiHashmap;
    public static NativeMultiHashMap<int, BucketedEntityData> entityQuadrantMultiHashmap;

    private void Awake()
    {
        resourceNodeQuadrantMultiHashmap = new NativeMultiHashMap<int, BucketedResourceNodeData>(0, Allocator.Persistent);
        entityQuadrantMultiHashmap = new NativeMultiHashMap<int, BucketedEntityData>(0, Allocator.Persistent);
    }

    private void OnDestroy()
    {
        resourceNodeQuadrantMultiHashmap.Dispose();
        entityQuadrantMultiHashmap.Dispose();
    }

    //Get hashmap key (quadrant/chunk) based on X and Z world coordinates.
    public static int GetPositionHashMapKey(float3 position)
    {
        return (int)(math.floor(position.x / quadrantCellSize) + (quadrantZMultiplier * math.floor(position.z / quadrantCellSize)));
    }
}
